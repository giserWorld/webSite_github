{"version":3,"sources":["components/echarts/test.js","components/echarts/react_line.js","components/echarts/echartsViewer.js"],"names":["Component","react_line","props","getOption","title","text","tooltip","trigger","axisPointer","type","label","backgroundColor","legend","itemWidth","right","top","textStyle","color","toolbox","feature","saveAsImage","grid","left","bottom","containLabel","xAxis","data","yAxis","series","state","name","echarts","option","this","notMerge","lazyUpdate","style","width","height","border","onEvents","echartsViewer","className"],"mappings":"6MAS2BA,Y,iBC8FZC,G,uEAjFX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAMVC,UAAU,WAsDN,MArDW,CAEPC,MAAO,CACHC,KAAM,kCAGVC,QAAS,CACLC,QAAS,OACTC,YAAa,CACXC,KAAM,QACNC,MAAO,CACLC,gBAAiB,aAKzBC,OAAQ,CACJC,UAAW,GACXC,MAAO,MACPC,IAAK,KACLC,UAAW,CACTC,MAAO,SAKbC,QAAS,CACLC,QAAS,CACPC,YAAa,KAInBC,KAAM,CACFC,KAAK,KACLR,MAAM,KACNS,OAAQ,KACRC,cAAc,GAGlBC,MAAO,CACHhB,KAAM,WACNiB,KAAM,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAGrDC,MAAO,CACHlB,KAAM,SAGVmB,OAAQ,CAAC,CACLF,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,MACvCjB,KAAM,WAxDd,EAAKoB,MAAM,CACPC,KAAK,SAHK,E,qDAgEd,OACI,kBAAC,IAAD,CACIC,QAASA,IACTC,OAAQC,KAAK9B,YACb+B,UAAU,EACVC,YAAY,EACZC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAAQC,OAAO,mBAChDC,SAAU,O,kDAxEDxC,cCjBnByC,E,kDACF,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IACD2B,MAAM,CACPC,KAAK,iBAHK,E,qDAOd,OACI,yBAAKY,UAAU,QACX,kBAAC,EAAD,S,kDAVY1C,aAkBbyC","file":"static/js/15.663d0122.chunk.js","sourcesContent":["import React ,{ Component }from 'react';\r\nimport echarts from 'echarts/lib/echarts';// 引入 ECharts 主模块\r\nimport  'echarts/lib/chart/bar';// 引入图标类型,柱状图\r\n// 引入提示框和标题组件\r\nimport 'echarts/lib/component/tooltip';\r\nimport 'echarts/lib/component/title';\r\n/**************************index**********************\r\n *\r\n **/\r\nclass EchartsTest  extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"EchartsTest \",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div id=\"main\" style={{ width: 400, height: 400 }}></div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        var myChart = echarts.init(document.getElementById('main'));//基于准备好的dom，初始化echarts实例\r\n        // 绘制图表\r\n        myChart.setOption({\r\n            title: { text: 'ECharts 入门示例' },\r\n            tooltip: {},\r\n            xAxis: {\r\n                data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\r\n            },\r\n            yAxis: {},\r\n            series: [{\r\n                name: '销量',\r\n                type: 'bar',\r\n                data: [5, 20, 36, 10, 10, 20]\r\n            }]\r\n        });\r\n    }//e\r\n}\r\nexport default EchartsTest ;","import React ,{ Component }from 'react';\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';//导入核心库\r\nimport echarts from 'echarts/lib/echarts';//导入echarts核心库\r\nimport 'echarts/lib/chart/line';//导入图表类型\r\n// 引入提示框和标题组件\r\nimport 'echarts/lib/component/tooltip'\r\nimport 'echarts/lib/component/title'\r\nimport 'echarts/lib/component/legend'\r\nimport 'echarts/lib/component/markPoint'\r\n/**************************echarts-for-react**********************\r\n *1.\"echarts-for-react\"可以在React中调用echarts接口直接渲染出Echarts图表，只要传入相关的参数和数据即可。代码简介\r\n **************************属性**********************\r\n *1.echarts:输入echarts核心库\r\n *2.option {object_required}:echarts option配置\r\n *2.notMerge {object_opt}:当调用setOption()时，不合并数据，默认false\r\n *3.lazyUpdate {object_opt}:当调用setOption()时，延迟更新数据，默认false\r\n *4.style {object_opt}:echarts div的样式,默认为{height: '300px'}\r\n *5.className {string_opt}:echarts div的样式类名\r\n *6.onEvents {object_opt}:echarts事件\r\n **/\r\n\r\nclass react_line extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"index\",\r\n        }\r\n    }\r\n    //图标配置option\r\n    getOption=()=>{\r\n        let option={\r\n            //标题组件\r\n            title: {\r\n                text: '堆叠区域图'\r\n            },\r\n            //提示框组件\r\n            tooltip: {\r\n                trigger: 'axis',//提示触发类型\r\n                axisPointer: {\r\n                  type: 'cross',\r\n                  label: {\r\n                    backgroundColor: '#6a7985'\r\n                  }\r\n                }\r\n            },\r\n            //图例组件\r\n            legend: {\r\n                itemWidth: 16,\r\n                right: '10%',\r\n                top: '0%',\r\n                textStyle: {\r\n                  color: '#000'\r\n                },\r\n                // data: ['邮件营销', '联盟广告', '视频广告']\r\n            },\r\n            //工具栏，默认内置有导出图片，数据视图，动态类型切换，数据区域缩放，重置五个工具\r\n            toolbox: {\r\n                feature: {\r\n                  saveAsImage: {}\r\n                }\r\n            },\r\n            //直角坐标系内绘图网格，单个 grid 内最多可以放置上下两个 X 轴，左右两个 Y 轴。可以在网格上绘制折线图，柱状图，散点图（气泡图）。\r\n            grid: {\r\n                left:\"5%\",\r\n                right:\"5%\",\r\n                bottom: '8%',\r\n                containLabel: true\r\n            },\r\n            //直角坐标系 grid 中的 x 轴，一般情况下单个 grid 组件最多只能放上下两个 x 轴，多于两个 x 轴需要通过配置 offset 属性防止同个位置多个 x 轴的重叠。\r\n            xAxis: {\r\n                type: 'category',\r\n                data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n            },\r\n            //直角坐标系 grid 中的 y 轴，一般情况下单个 grid 组件最多只能放左右两个 y 轴，多于两个 y 轴需要通过配置 offset 属性防止同个位置多个 Y 轴的重叠\r\n            yAxis: {\r\n                type: 'value'\r\n            },\r\n            //系列列表。每个系列通过 type 决定自己的图表类型\r\n            series: [{\r\n                data: [820, 932, 901, 934, 1290, 1330, 1320],\r\n                type: 'line'\r\n            }]\r\n        };\r\n        return option;\r\n    }//e\r\n    render(){\r\n        return(\r\n            <ReactEchartsCore\r\n                echarts={echarts}\r\n                option={this.getOption()}\r\n                notMerge={true}\r\n                lazyUpdate={true}\r\n                style={{ width: '400px', height: '400px',border:\"1px solid black\"}}\r\n                onEvents={{\r\n                    // click: this.onChartClick\r\n                }}\r\n            />\r\n        )\r\n    }\r\n    componentDidMount(){\r\n\r\n    }\r\n}\r\nexport default react_line;","import React ,{ Component }from 'react';\r\n\r\nimport EchartsTest from './test';\r\nimport Rreact_line from './react_line';\r\nclass echartsViewer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"echartsViewer\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n                <Rreact_line/>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        \r\n    }\r\n}\r\nexport default echartsViewer;"],"sourceRoot":""}