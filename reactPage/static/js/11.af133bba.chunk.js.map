{"version":3,"sources":["api/api.js","components/react/scss/scssStyle.module.scss","components/rnd/index.js","components/react/reactDOM_render.js","components/react/React_createElement.js","components/react/component_function.js","components/react/react_scss.js","components/react/react_list_ele.js","components/react/react_props_children.js","components/react/ajaxRequest_data.js","components/react/reactViewer.js"],"names":["get","url","param","callback","axios","params","headers","token","window","sessionStorage","getItem","then","response","status","result","config","data","post","JSON","parse","text","request","responseText","defaults","withCredentials","timeout","module","exports","Component","Child","props","state","name","type","Component_function","Li_list","listData","id","value","List_li","map","item","idex","key","this","onClick","clearList","bind","setState","console","log","Child_component1","modelCloseFun","visible","showModel","className","children","title","onOk","onCancel","ajaxRequest_data","url2","url_proxy","url_proxy2","requiestData","requiestData2","requiestData3","ajaxRequest","ajaxRequest2","ajaxRequest3","fetch","api","json","dm","code_level","reactViewer"],"mappings":"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","file":"static/js/11.af133bba.chunk.js","sourcesContent":["import axios from 'axios';//http请求模块axios\r\n//import axios from './interceptors';//配置拦截器的axios\r\n//import qs from 'qs';//用qs.stringify()将对象序列化成URL的形式,qs这个包在install axios时就已经装了\r\n/*********************基础的网络请求工具(配置axios http请求的方法)*****************\r\n *更新时间:2020.08.13\r\n *1.支持的请求方法：\r\n    1)get(url, par):GET请求方式\r\n    2)post(url, par):POST请求方式\r\n    3)del(url, par):DEL请求方式\r\n    4)put(url, par):PUT请求方式\r\n */\r\n/*****************************axios的请求的全局设置*******************************/\r\n//axios.defaults.baseURL = 'https://api.example.com';//配置基础路径\r\naxios.defaults.headers.post['Content-Type']='application/json;charset=UTF-8';//默认\r\n//配置post请求headers的param参数类型:\"application/x-www-form-urlencoded\"\r\n//axios.defaults.headers.post['Content-Type']='application/x-www-form-urlencoded;charset=UTF-8';\r\naxios.defaults.withCredentials=true;//带cookie请求\r\naxios.defaults.timeout=5000//请求的超时时间 5000ms\r\n//console.log(axios.defaults);\r\n\r\n\r\n\r\n/**\r\n * Get方法\r\n * @param url\r\n * @param param\r\n * @returns {AxiosPromise<any>}\r\n * @constructor\r\n */\r\nexport function get(url, param,callback) {\r\n    axios.get(url,{\r\n        params: param,\r\n        headers: {\r\n            //存放token\r\n            token:window.sessionStorage.getItem(\"myToken\")||\"\",\r\n        }\r\n    }).then(function(response){\r\n        if(response.status==200){\r\n            let result={\r\n                status:response.status,//状态码\r\n                param:response.config.params||{},//参数对象\r\n                //text:response.request.responseText,\r\n                data:response.data,\r\n            };\r\n            callback(result);\r\n        }\r\n    })\r\n}//e\r\n\r\n//get promise\r\nexport function get_promise(url,param){\r\n    let promise=axios.get(url,{\r\n        params: param,\r\n        headers: {\r\n            //存放token\r\n            token:window.sessionStorage.getItem(\"myToken\")||\"\",\r\n        }\r\n    });\r\n    return promise;\r\n}//e\r\n\r\n/**\r\n * Post方法\r\n * @param url\r\n * @param param\r\n * @returns {AxiosPromise<any>}\r\n * @constructor\r\n */\r\nexport function post(url,param,callback){\r\n    param=param||{};\r\n    axios.post(url,param,{\r\n        headers: {\r\n            //存放token\r\n            token:window.sessionStorage.getItem(\"myToken\")||\"\",\r\n        }\r\n    }).then(function(response){\r\n        if(response.status==200){\r\n            let param=response.config.data||{};\r\n            if(typeof(param)==\"string\")param=JSON.parse(response.config.data)\r\n            let result={\r\n                param:param,\r\n                text:response.request.responseText,\r\n                data:response.data,\r\n                status:response.status\r\n            };\r\n            callback(result);\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Delete方法\r\n * @param url\r\n * @param par\r\n * @returns {AxiosPromise}\r\n * @constructor\r\n */\r\nexport function del(url, param) {\r\n    return axios.delete(url, {\r\n        params: param,\r\n        headers: {\r\n            //  存放token\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Put方法\r\n * @param url\r\n * @param par\r\n * @returns {AxiosPromise<any>}\r\n * @constructor\r\n */\r\nexport function put(url, param) {\r\n    return axios.put(url, param, {\r\n        headers: {\r\n            //  存放token\r\n        }\r\n    })\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fontstyle\":\"scssStyle_fontstyle__1lZvb\",\"title\":\"scssStyle_title__1nuLJ\"};","import React ,{ Component }from 'react';\r\nimport { Rnd } from 'react-rnd'\r\n/**************************rnd**********************\r\n *一个可调整大小且可拖动的React组件。\r\n **************************属性**********************\r\n *1.position(object):显示位置,例如:{ x: number, y: number }\r\n **/\r\nclass rnd_index extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"rnd_index\",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>{this.state.name}</h2><hr/>\r\n                <Rnd \r\n                    default={{x: 500,y: 100,width: 320,height: 200}}\r\n                    style={{border:\"1px solid red\"}}\r\n                >\r\n                    001 \r\n                </Rnd>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n\r\n    }\r\n}\r\nexport default rnd_index;","import React ,{ Component }from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport { Button } from 'antd';\r\n/**************************reactDOM_render***********************\r\n*1.react-dom 的 package 提供了可在应用顶层使用的 DOM（DOM-specific）方法\r\n**************************函数*************************\r\n*1.render(element, container[, callback])\r\n    在提供的 container 里渲染一个 React元素(jsx,react组件)，并返回对该组件的引用,该方法属于异步执行，可能返回为undefined\r\n***************************注解*************************\r\n*1.如果我们想在html文件中直接使用react，那我们就要用到ReactDOM.render，作用就是将jsx代码转化为HTML代码，并插入指定的dom节点中\r\n*2.ReactDOM.render()函数为异步渲染\r\n*/\r\nclass reactDOM_render extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"reactDOM_render\",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>{this.state.name}</h2>\r\n                <div ref=\"divCon\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    //纯jsx\r\n    jsx1=()=>(\r\n        <div>\r\n           <span>用户名:</span>\r\n           <span>{this.state.name}</span>\r\n        </div>\r\n    )\r\n    //包含react组件的jsx\r\n    jsx2=()=>(\r\n        <div>\r\n           <p>jsx包含react组件</p>\r\n           <Child></Child>\r\n        </div>\r\n    )\r\n    componentDidMount(){\r\n        var domCom=this.refs.divCon;//dom节点\r\n        ReactDOM.render(this.jsx2(),domCom);//将jsx解析为html代码，并插入指定的reactdom节点中\r\n    }\r\n}\r\n//子组件\r\nclass Child extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"\",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button type=\"primary\">Primary Button</Button> \r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n\r\n    }\r\n}\r\n\r\nexport default reactDOM_render;","import React ,{ Component }from 'react';\r\n/**************************React_createElement***********************\r\n *1.React.createElement(type,[props],[...children])\r\n    创建并返回指定类型的新 React 元素\r\n *2.document.createElement(\"div\")方法返回dom对象\r\n *3.React.createElement(\"div\")方法返回react dom对象(虚拟dom)与html dom对象是不同的\r\n*/\r\nclass React_createElement extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"React_createElement\",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>{this.state.name}</h2>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        var divDom=document.createElement(\"div\");\r\n        var divDom2=React.createElement(\"div\");\r\n        console.dir(divDom);\r\n        console.dir(divDom2);\r\n    }\r\n}\r\nexport default React_createElement;","import React,{ useState, useEffect, useRef }from 'react';\r\n/**************************函数组件********************\r\n *1.函数式组件:如果js函数接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素(jsx),则认为该函数为一个有效的React组件\r\n *2.函数式组件的参数为组件属性\r\n *3.Hook 不能在 class 组件中使用，即这使得你不使用 class 也能使用 React\r\n *4.在函数组件中，没有 this\r\n *5.在函数退出后变量就会”消失”，而 state 中的变量会被 React保留\r\n *6.函数式组件可以省略参数props,但必须要有返回值且返回值必须为jsx对象\r\n *7.每次状态属性发生改变,该函数会重新执行\r\n *8.react每次组件更新都会调用新的函数(每次刷新都不是同一函数，所以函数内的变量每次都是重新赋值，但是每次都保留原始的state属性)\r\n *9.函数式组件中需要导入\"React\"包\r\n **************************react库********************\r\n *1.react Hook:Hook是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\r\n *2.Hook 使用规则：\r\n    1)只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用\r\n    2)只能在 React 的函数组件中调用 Hook,不要在其他 JavaScript 函数中调用\r\n *3.函数式组件中可多次使用 useState()\r\n *4.useState(init):init不一定要是一个对象,init参数只有在第一次渲染时会被用到\r\n    1)可声明多个 state 变量\r\n    2)useState(init)函数返回一个数组,[state,setState]\r\n    3)state 只在组件首次渲染的时候被创建。在下一次重新渲染时，useState 返回给我们当前的 state\r\n *5.useEffect(function):dom渲染之后执行(回调函数不带参数)\r\n *  1)Effect Hook 可以让你在函数组件中执行副作用操作(类似于componentDidMount和componentDidUpdate:)\r\n *  2)useEffect会在第一次渲染之后和每次更新之后都会执行\r\n *  3)如果useEffect()返回一个清除函数,则组件卸载的时候执行该清除函数,等同于\"componentWillUnmount(子组件重新加载时也会触发该清除函数)\r\n *  4)组件每次渲染时,会在执行当前 effect 之前对上一个 effect 进行清除\r\n *  5)useEffect可以在组件渲染后实现各种不同的副作用。有些副作用可能需要清除\r\n *  6)useEffect可以使用多个函数，React 将按照 effect 声明的顺序依次调用组件中的每一个 effect\r\n *  7)通过跳过 Effect 进行性能优化\r\n *     <1>如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React 跳过对 effect 的调用，只要传递数组作为 useEffect 的第二个可选参数即可\r\n *     <2>如果你要使用此优化方式，请确保数组中包含了所有外部作用域中会随时间变化并且在 effect 中使用的变量，否则你的代码会引用到先前渲染中的旧变量\r\n *     <3>如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（[]）作为第二个参数\r\n *     <4>如果你传入了一个空数组（[]），effect 内部的 props 和 state 就会一直拥有其初始值, effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行 \r\n *6.useRef(initialValue):返回一个可变的 ref 对象\r\n *  1)返回的 ref 对象在组件的整个生命周期内保持不变\r\n *  2)useRef 会在每次渲染时返回同一个 ref 对象\r\n **/\r\n//父组件\r\nfunction Component_function(props){\r\n    let name=\"函数式组件\";\r\n    //状态变量，声明了一个叫 count 的 state 变量，然后把它设为 0,通过调用 setCount 来更新当前的 count\r\n    let [mc,setMc]=useState(\"初始mc\");//[\"初始mc\",ƒ]\r\n    const [count, setCount] = useState(0);\r\n    const [status, setStatus] = useState(true);\r\n    const ref_span=useRef(null);//创建ref对象,例如:{current: null}\r\n    //console.log(ref_span);\r\n\r\n    const changeStateValue=()=>{\r\n        setMc(\"改变状态mc属性\");\r\n        setStatus(!status);\r\n    }\r\n    let changeAttr=()=>{\r\n        name=\"函数式组件22\";\r\n    }//e\r\n    //html dom树渲染完成后触发(每次dom渲染之后之后执行)\r\n    useEffect(()=>{\r\n        var htmlDom=ref_span.current||null;\r\n        console.dir(htmlDom);\r\n        htmlDom.innerText=\"htmlDom\"\r\n        console.log(\"2.父组件:useEffect1\");\r\n    });\r\n\r\n    /*通过跳过 Effect 进行性能优化,如果第二个参数数组中的属性值都不发生变化，则跳过该useEffect()函数\r\n    *如果数组中的属性值有一个发生变化，都会调用该函数\r\n    */\r\n    useEffect(()=>{\r\n        console.log(\"2.父组件(优化):useEffect2\");\r\n    },[mc]);\r\n\r\n    /*\r\n    *执行只运行一次的，相当于真正的componentDidMount\r\n    */\r\n   useEffect(()=>{\r\n        console.log(\".父组件(只运行一次):useEffect3\");\r\n    },[]);\r\n\r\n    console.log(\"1.父组件:render\");\r\n    return (\r\n        <div className=\"function_component\">\r\n            <h2>{mc}</h2>\r\n            {status?<Component_function_child/>:\"\"}\r\n            <button onClick={changeStateValue}>修改状态属性mc</button><p/>\r\n            <button onClick={changeAttr}>修改成员属性name</button><p/>\r\n            <span ref={ref_span}>useRef</span>\r\n        </div>\r\n    );\r\n}//e\r\n\r\n//子函数组件\r\nfunction Component_function_child(props){\r\n    let name=\"子函数组件\";\r\n    useEffect(()=>{\r\n        name=\"name\"; \r\n        console.log(\"1-2子组件useEffect\");\r\n        return ()=>{//组件卸载时触发\r\n            console.log(\"*****Component_function_child子组件卸载*****\");\r\n        }\r\n    });\r\n\r\n    /*\r\n    *执行只运行一次的，相当于真正的componentWillUnmount\r\n    */\r\n   useEffect(()=>{\r\n        return ()=>{//组件卸载时触发\r\n            console.log(\"*****componentWillUnmount(子组件卸载只运行一次)*****\");\r\n        }\r\n    },[]);\r\n\r\n    console.log(\"1-1子组件:render\");\r\n    return (\r\n       <div>\r\n           {name}\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Component_function;","import React ,{ Component }from 'react';\r\nimport st from './scss/scssStyle.module.scss';\r\n/**************************scss样式文件**********************\r\n *\r\n **/\r\nclass reactScss extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"scss样式文件\",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>{this.state.name}</h2><hr/>\r\n                <p className={st.title}>username:</p>\r\n                <p  className={st.fontstyle}>小明</p>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"scss模块系统:\",st);\r\n    }\r\n}\r\nexport default reactScss;","import React ,{ Component }from 'react';\r\n\r\n/**************************列表元素***********************\r\n *1.map():map() 方法来遍历数组。将数组中的每个元素变成html标签\r\n *2.遍历数据生成列表有两种方式:\r\n    1)将遍历数据的代码写在一个方法里面，在render()中引入该方法\r\n    2)直接在render()使用jsx语法遍历数据\r\n*/\r\nclass Li_list extends Component{\r\n    state={\r\n        name:\"列表元素\",\r\n        listData:[\r\n            {id:1,value:\"li1\"},\r\n            {id:2,value:\"li2\"},\r\n            {id:3,value:\"li3\"},\r\n        ]\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    //格式化数据属性，固定值，清除改变状态属性值，该属性值不会发生变化\r\n    List_li=this.state.listData.map((item,idex)=>{\r\n        return <li key={item.id}>{item.value}</li>\r\n    });\r\n    render(){//渲染函数，当组件实例化后调用\r\n        let {listData}=this.state;//对象的解构赋值\r\n        return(\r\n            <div>\r\n                <h2>{this.state.name}</h2>\r\n                <h3>1.jsx传入一个js变量</h3>\r\n                <ul>{this.List_li}</ul>\r\n                <h3>2.jsx传入一个表达式</h3>\r\n                <ul>\r\n                    {\r\n                       listData.map((item,idex)=>{\r\n                           return <li key={item.id}>{item.value}</li>\r\n                       })\r\n                    }\r\n                </ul>\r\n                <button onClick={this.clearList.bind(this)}>清空列表数据</button><p/>\r\n            </div>\r\n        )\r\n    }\r\n    clearList(){\r\n        this.setState({listData: []});\r\n        console.log(\"---------------------\");\r\n        console.log(this);\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"---------------------\");\r\n        console.log(this);\r\n    }\r\n}\r\nexport default Li_list;","import React ,{ Component }from 'react';\r\nimport { Modal, Button } from 'antd';\r\nimport React_list_ele from './react_list_ele';\r\n/*****************************props_children属性**********************************\r\n *1.如果组件标签内部有内容，则组件内容则会转为该组件props.children中\r\n    例如:\"<Child_component1><React_list_ele/></Child_component1>\",Child_component1组件中包含React_list_ele组件\r\n    则React_list_ele组件会作为Child_component1组件的props.children(子节点)\r\n */\r\nclass props_children extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"props_children\",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n                <h2>{this.state.name}</h2><hr/>\r\n                <Child_component1>\r\n                    <React_list_ele/>\r\n                </Child_component1>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n          \r\n    }\r\n}\r\n\r\n//子组件图标事件\r\nclass Child_component1 extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"charts图表\",\r\n            visible:false\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n                <h2>{this.state.name}</h2>\r\n                {this.props.children}\r\n                <button onClick={this.showModel}>显示弹框</button>\r\n                <Modal\r\n                    title=\"Basic Modal\"\r\n                    visible={this.state.visible}\r\n                    onOk={this.modelCloseFun}\r\n                    onCancel={this.modelCloseFun}\r\n                    >\r\n                   {this.props.children}\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n    modelCloseFun=()=>{\r\n        let _self=this;\r\n        this.setState({\r\n            visible:false\r\n        });\r\n    }\r\n    showModel=()=>{\r\n        let _self=this;\r\n        this.setState({\r\n            visible:true\r\n        });\r\n        console.log(this);\r\n    }\r\n    componentDidMount(){\r\n          \r\n    }\r\n}\r\n\r\nexport default props_children;\r\n","\r\nimport React ,{ Component }from 'react';\r\nimport * as api from '../../api/api';\r\nimport BackendURL from '../../api/BackendURL';\r\n\r\n/*********************axios请求接口数据(跨域请求数据)********************\r\n *1.如果直接请求非同源服务器数据时会报错跨域请求\r\n *2.\r\n **/\r\nclass ajaxRequest_data extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"ajax请求数据(跨域请求数据)\",\r\n            url:\"http://112.74.196.156/DiseasesGISServer/wz/wz_find_Wz.action?dm=53&code_level=2\",\r\n            url2:\"http://d.l-try.com:8080/ly/TqUQrCz/getCzExceptionTotal.lt\",\r\n            url_proxy:\"/api/DiseasesGISServer/wz/wz_find_Wz.action\",\r\n            url_proxy2:\"/apc/YLZRBHQGISServer/Intro/getIntro.action\",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.state.name}</h1><hr/>\r\n                <button onClick={this.requiestData.bind(this)}>1.直接请求(fetch get,报错跨域)</button><p/>\r\n                <button onClick={this.requiestData2.bind(this)}>2.直接请求(axios post,no token，没有token与跨域请求没有关系，只是请求数据失败)</button><p/>\r\n                <button onClick={this.requiestData3.bind(this)}>3.直接请求(axios post,token，没有token与跨域请求没有关系，只是请求数据失败)</button><p/>\r\n                <button onClick={this.ajaxRequest.bind(this)}>4.配置虚拟代理服务器(fetch get)</button><p/>\r\n                <button onClick={this.ajaxRequest2.bind(this)}>5.配置虚拟代理服务器(axios get)</button><p/>\r\n                <button onClick={this.ajaxRequest3.bind(this)}>6.配置虚拟代理服务器(axios post,test)</button><p/>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n       \r\n    }\r\n    //fetch get请求\r\n    requiestData(){\r\n        var _self=this;\r\n        fetch(_self.state.url).then(response=>response.text()).then(function(result){\r\n            console.log(result);\r\n        }); \r\n    }\r\n    //axios post请求,no token\r\n    requiestData2(){\r\n        var _self=this;\r\n        var param={\r\n          \r\n        };\r\n        api.post(_self.state.url2,param,function(result){\r\n            console.log(result);\r\n        });\r\n    }\r\n    //axios post请求,token\r\n    requiestData3(){\r\n        var _self=this;\r\n        var param={\r\n          \r\n        };\r\n        api.post(_self.state.url2,param,function(result){\r\n            console.log(result);\r\n        });\r\n    }\r\n\r\n    //1.通过配置虚拟代理服务器，解决跨域问题(fetch get,使用代理路径,请求路径不需要http)\r\n    ajaxRequest(){\r\n        var _self=this;\r\n        var url=_self.state.url_proxy+\"?dm=53&code_level=2\";\r\n        fetch(url).then(response=>response.json()).then(function(result){\r\n            console.log(result);\r\n        });\r\n    }\r\n    //2.通过配置虚拟代理服务器，解决跨域问题(axios get,使用代理路径,请求路径不需要http)\r\n    ajaxRequest2(){\r\n        var _self=this;\r\n        var param={\r\n            dm:53,\r\n            code_level:2\r\n        };\r\n        api.get(_self.state.url_proxy,param,function(result){\r\n            console.log(result);\r\n        });\r\n    }\r\n    //3.通过配置虚拟代理服务器，解决跨域问题(axios post,使用代理路径,请求路径不需要http)\r\n    ajaxRequest3(){\r\n        var _self=this;\r\n        var url=\"/apc/YLZRBHQGISServer/Intro/getIntro.action\";//代理接口\r\n        var param={\r\n            dm:53,\r\n            code_level:2\r\n        };\r\n        api.post(url,param,function(result){\r\n            console.log(result);\r\n        });\r\n    }\r\n    \r\n}\r\nexport default ajaxRequest_data;","import React ,{ Component }from 'react';\r\n\r\n//rnd拖动组件\r\nimport Rnd_index from '../rnd/index';\r\n//react\r\nimport ReactDOM_render from './reactDOM_render';\r\nimport React_createElement from './React_createElement';\r\nimport Component_function from './component_function';\r\nimport React_scss from './react_scss';\r\nimport React_props_children from './react_props_children';\r\nimport AjaxRequest_data from './ajaxRequest_data';\r\n\r\nclass reactViewer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"reactViewer\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n              <AjaxRequest_data name={this.state.name}/>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        \r\n    }\r\n}\r\nexport default reactViewer;"],"sourceRoot":""}