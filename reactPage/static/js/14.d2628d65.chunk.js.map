{"version":3,"sources":["components/considerKnowledge/react/lifecycle_componentDidUpdate.js","components/considerKnowledge/testViewer.js"],"names":["componentDidUpdate","props","change_input","setState","value","state","name","evt","key","target","this","console","log","className","onChange","handelChange","bind","ref","onClick","prevProps","prevState","Component","testViewer"],"mappings":"oKA+DeA,E,kDAtDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAqBVC,aAAa,WACT,EAAKC,SAAS,CACVC,MAAM,eAtBV,EAAKC,MAAM,CACPC,KAAK,sBACLF,MAAM,IAJI,E,yDAcLE,EAAKC,GACd,IAAIC,EAAIF,GAAQ,GACZF,EAAMG,EAAIE,OAAOL,OAAS,GAC1BC,EAAM,GACPG,IAAIH,EAAMG,GAAKJ,GACfI,GAAIE,KAAKP,SAASE,K,+BAUrB,OADAM,QAAQC,IAAI,+BAER,yBAAKC,UAAU,QACZ,4BAAKH,KAAKL,MAAMC,MAChB,2BAAOF,MAAOM,KAAKL,MAAMD,MAAOU,SAAUJ,KAAKK,aAAaC,KAAKN,KAAK,WAAW,4BACjF,4BAAQO,IAAI,OAAOC,QAASR,KAAKR,cAAjC,oC,0CAOPS,QAAQC,IAAI,oE,yCAIGO,EAAWC,GAE1BT,QAAQC,IAAI,qGACZD,QAAQC,IAAI,uDAAoBO,GAChCR,QAAQC,IAAI,uDAAoBQ,GAChCT,QAAQC,IAAI,oDAAsBF,KAAKT,OACvCU,QAAQC,IAAI,oDAAsBF,KAAKL,OACvCM,QAAQC,IAAI,8C,GApDaS,aCc3BC,E,kDACF,WAAYrB,GAAO,IAAD,8BACd,cAAMA,IACDI,MAAM,CACPC,KAAK,iCAHK,E,qDAOd,OACI,yBAAKO,UAAU,qBACX,kBAAC,EAAD,S,kDAVSQ,aAkBVC","file":"static/js/14.d2628d65.chunk.js","sourcesContent":["import React ,{ Component }from 'react';\r\n\r\n/***************************componentDidUpdate*******************************\r\n *1.在生命周期的第一次(组件初始化)时componentDidUpdate不会被调用,首次渲染不会执行此方法\r\n *2.当组件html dom更新完成后触发componentDidUpdate()\r\n *3.当前组件更新render()之后执行,子组件的render()之前执行\r\n *4.每次组件更新后触发\r\n */\r\nclass componentDidUpdate extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"componentDidUpdate:\",\r\n            value:\"\",\r\n        }\r\n    }\r\n\r\n    /*******************处理值改变函数******************\r\n    *参数:name(String):表单元素绑定的状态属性\r\n    ******evt(Event):\"onChange\"触发的事件对象\r\n    *注解:\r\n    *1.html元素、react组件绑定状态属性(单向、双向绑定属性方法),\r\n    */\r\n    handelChange(name,evt){\r\n        let key=name || \"\";\r\n        let value=evt.target.value || \"\";//表单值\r\n        let state={};\r\n        if(key)state[key]=value;\r\n        if(key)this.setState(state);\r\n        //console.log(state);\r\n    }//e\r\n    change_input=()=>{\r\n        this.setState({\r\n            value:\"ddddddddd\"\r\n        });\r\n    }\r\n    render(){\r\n        console.log(\"组件render:render()\");\r\n        return(\r\n            <div className=\"wrap\">\r\n               <h2>{this.state.name}</h2>\r\n               <input value={this.state.value} onChange={this.handelChange.bind(this,\"value\")}/><p/>\r\n               <button ref=\"btn1\" onClick={this.change_input}>改变state属性</button>\r\n            </div>\r\n        )\r\n    }\r\n    //组件安装完成后触发\r\n    componentDidMount(){\r\n        let _self=this;\r\n        console.log(\"组件安装完成后:componentDidMount()\");\r\n    }//e\r\n    \r\n    //组件更新完成后触发\r\n    componentDidUpdate(prevProps, prevState){\r\n        let _self=this;\r\n        console.log(\"******************组件更新完成后:componentDidUpdate()****************\");\r\n        console.log(\"上一次组件属性prevProps:\",prevProps);//上一次组件Props\r\n        console.log(\"上一次组件状态prevState:\",prevState);//上一次组件State\r\n        console.log(\"当前组件属性currentProps:\",this.props);//当前组件props\r\n        console.log(\"当前组件状态currentState:\",this.state);//当前组件state\r\n        console.log(\"******************end*****************\");\r\n    }//e\r\n}\r\nexport default componentDidUpdate;\r\n","import React ,{ Component }from 'react';\r\n//packageES6\r\n// import Package_qs from './packageES6/package_qs';\r\n\r\n//react\r\n// import Test_Component_Fun from './react/test_Component_Fun';\r\n// import Test_htmlTag_a from './react/test_htmlTag_a';\r\n// import Test_react_Fragment from './react/react_Fragment';\r\n// import Test_router_to_url from './react/router_to_url';\r\n// import React_jsx_htmlDom from './react/react_virtualDom_htmlDom';\r\n// import Test_define_jsx_variable from './react/test_define_jsx_variable';\r\n//import React_optimization_Loadable from './react/react_optimization_Loadable()';\r\n\r\n//router\r\n// import Test_basic_Routing from './react/react-router-dom/basic_Routing';\r\n// import Test_nested_routing from './react/react-router-dom/nested_routing';\r\n\r\n//生命周期函数\r\n//import Lifecycle_componentWillReceiveProps from './react/lifecycle_componentWillReceiveProps';//componentWillReceiveProps\r\nimport Lifecycle_componentDidUpdate from './react/lifecycle_componentDidUpdate';//componentDidUpdate\r\n//import Lifecycle_componentWillMount from './react/lifecycle_componentWillMount';//componentWillMount\r\n//import Lifecycle_componentWillUnmount from './react/lifecycle_componentWillUnmount';//componentWillMount\r\nclass testViewer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"considerKnowledge视图\",\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"considerKnowledge\">\r\n                <Lifecycle_componentDidUpdate/>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n\r\n    }\r\n}\r\nexport default testViewer;\r\n"],"sourceRoot":""}