{"version":3,"sources":["components/ES6/es6_class.js","components/ES6/es6_array.js","components/ES6/es6_variable_assign.js","components/ES6/js_logic_operation.js","components/ES6/es6Viewer.js"],"names":["es6_calssFun","Component","staticName","staticFun","value","console","log","baseUrl","es6_calss","es6Viewer","props","state","name","className"],"mappings":"oKAyBMA,GCrBkBC,YCEUA,YFFVA,Y,mCAqBlBD,EACKE,WAAW,2BADhBF,EAGKG,UAAU,SAACC,GACdC,QAAQC,IAAI,4BAAQF,IAJtBJ,EAOKO,QAKM,mCGvBGN,YH4BLO,IInCTC,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,KAAK,aAHK,E,qDAOd,OACI,yBAAKC,UAAU,W,kDATHZ,aAkBTQ","file":"static/js/13.b0db0f37.chunk.js","sourcesContent":["import React ,{ Component }from 'react';\r\n/*****************************es6_calss**********************************\r\n *1.数组扩展运算:将一个数组转为用逗号分隔的参数序列\r\n */\r\nclass es6_calss extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"es6_calss\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n                <h2>{this.state.name}</h2>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"********静态属性*******\",es6_calssFun.staticName);\r\n        es6_calssFun.staticFun(\"9999999\"); //静态函数\r\n        console.log(\"********静态自执行函数*******\",es6_calssFun.baseUrl);\r\n    }\r\n}\r\n//es6类\r\nclass es6_calssFun{\r\n    static staticName=\"静态属性\";\r\n    //静态函数\r\n    static staticFun=(value)=>{\r\n        console.log(\"静态函数:\",value);\r\n    };\r\n    //静态自执行函数\r\n    static baseUrl = (function () {\r\n        if (process.env.NODE_ENV === \"development 开发环境\") {\r\n          return \"development\"\r\n        } \r\n        else {\r\n          return \"product 产品环境\"\r\n        }\r\n    })()\r\n}//e\r\n\r\nexport default es6_calss;","import React ,{ Component }from 'react';\r\n/*****************************es6_array**********************************\r\n *1.数组扩展运算:将一个数组转为用逗号分隔的参数序列\r\n */\r\nclass es6_array extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"es6_array\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n                <h2>{this.state.name}</h2>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        //1.数组扩展运算\r\n        var arr1=[\"qq\",\"dd\",\"ff\"];\r\n        var copyArray=[...arr1]\r\n        console.log(arr1);\r\n    }\r\n}\r\nexport default es6_array;","import React ,{ Component }from 'react';\r\n/*****************************es6_变量解构赋值**********************************\r\n *1.ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构\r\n *2.数组的解构赋值:从数组中提取值，按照对应位置，对变量赋值,如果解构不成功，变量的值就等于undefined\r\n *3.对象的解构赋值:数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值\r\n */\r\nclass es6_variable_assign extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"es6_variable_assign\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n                <h2>{this.state.name}</h2>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        //2.对象的解构赋值\r\n        var obj={\r\n            name:\"mc\",\r\n            age:25,\r\n            code:51\r\n        };\r\n        let {age,code,name,n1}=obj;//age=\"25,code=51,name=\"mc\",n1=undefined\r\n        console.log(age,code,name);//25 51 \"mc\"\r\n\r\n        //1.数组的解构赋值\r\n        var [a1,a2,q3]=[\"qq\",\"dd\",\"ff\"];//a1=\"qq\",a2=\"dd\",q3=\"ff\"\r\n        let [m1, m2] = [1];//m1=1,m2=undefined\r\n        //console.log(m1,m2);//1 undefined\r\n    }\r\n}\r\nexport default es6_variable_assign;","import React ,{ Component }from 'react';\r\n/*****************************js-逻辑运算符**********************************\r\n *1.在JS “&&”和“||”是逻辑运算符；“&”和“|”是位运算符\r\n *2.\"||\":\r\n    1)只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值\r\n    2)只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值\r\n *3.\"&&\":\r\n    1)只要“&&”前面是true，无论“&&”后面是true还是false，结果都将返“&&”后面的值\r\n    2)只要“&&”前面是false，无论“&&”后面是true还是false，结果都将返“&&”前面的值\r\n *****************************应用场景**********************************\r\n *1.变量初始化赋值\r\n *2.\"if\"判断中使用逻辑运算符\r\n *3.代码执行顺序\r\n */\r\nclass index extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"index\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n                <h2>{this.state.name}</h2>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        //1.变量初始化赋值\r\n        var age;\r\n        var result1=age||\"age\";\r\n        console.log(\"变量初始化:\",result1);\r\n        //2.if条件判断\r\n        var status1=(1+5);\r\n        var status2=(\"status2\");\r\n        if(status1&&status2){//status1&&status2结果返回\"status2\"\r\n            console.log(\"if判断中使用逻辑运算符\");\r\n        }\r\n        //3.代码执行顺序(如果\"&&\"前面代码结果为true,则执行\"&&\"后面的代码)\r\n        var n1=true&&console.log(\"ddd\");//undefined\r\n        var n2= false&&console.log(\"ddd2\");//false\r\n        \r\n    }\r\n}\r\nexport default index;","import React ,{ Component }from 'react';\r\n\r\nimport Es6_array from './es6_array';\r\nimport Es6_variable_assign from './es6_variable_assign';\r\nimport Es6_class from './es6_class';\r\nimport Js_logic_operation from './js_logic_operation';\r\n//import Calculate_spread from './calculate_spread';\r\nclass es6Viewer extends Component{ \r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"es6Viewer\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n              {/* <Calculate_spread name={this.state.name}/> */}\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        \r\n    }\r\n}\r\nexport default es6Viewer;"],"sourceRoot":""}