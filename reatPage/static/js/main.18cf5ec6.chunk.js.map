{"version":3,"sources":["router/router.js","store/models/reducer_count.js","store/models/reducer_user.js","store/models/index.js","store/models/reducer_book.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["es6Viewer","loadable","reactViewer","antViewer","testViewer","fallback","layout_main","tsViewer","reduxViewer","echartsViewer","testPageViewer","router","exact","path","component","counter","state","reducers","increase","payload","test_action","effects","incrementAsync","rootState","Promise","resolve","setTimeout","increment","user","name","type","rootModels","bookData","count","redux_value","changeData","Object","assign","store","init","models","getState","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18cf5ec6.chunk.js","sourcesContent":["/**************************路由器组件************************/\r\nimport React from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';//hash模式路由\r\n//import { BrowserRouter as Router} from \"react-router-dom\";//history模式路由\r\nimport loadable from '@loadable/component';\r\n\r\n//es6\r\nconst es6Viewer=loadable(() => import('../components/ES6/es6Viewer'));\r\n//react\r\nconst reactViewer=loadable(() => import('../components/react/reactViewer'));\r\n//antDesign\r\nconst antViewer=loadable(() => import('../components/antDesign/antViewer'));\r\n//considerKnowledge\r\nconst testViewer=loadable(() => import('../components/considerKnowledge/testViewer'),{\r\nfallback: <div>正在加载...</div>//过程提示\r\n});\r\n//page\r\nconst layout_main=loadable(() => import('../viewer/layout_main/layout_main'));\r\n//typeScript\r\nconst tsViewer=loadable(() => import('../components/typeScript/tsViewer'));\r\n//redux\r\nconst reduxViewer=loadable(() => import('../components/redux/reduxViewer'));\r\n//echarts\r\nconst echartsViewer=loadable(() => import('../components/echarts/echartsViewer'));\r\n//testPage\r\nconst testPageViewer=loadable(() => import('../components/testPage/testPageViewer'));\r\n//路由器组件\r\nconst router=()=>(\r\n    <Router>\r\n        <Switch>\r\n            {/* react */}\r\n            <Route exact path=\"/\" component={reactViewer}/>\r\n            <Route exact path=\"/index\" component={layout_main}/>\r\n            <Route exact path=\"/react\" component={reactViewer}/>\r\n            {/* antDesign */}\r\n            <Route exact path=\"/ant\" component={antViewer}/>\r\n            {/* considerKnowledge */}\r\n            <Route exact path=\"/test\" component={testViewer}/>\r\n            {/* typeScript */}\r\n            <Route exact path=\"/ts\" component={tsViewer}/>\r\n            {/* redux */}\r\n            <Route exact path=\"/redux\" component={reduxViewer}/>\r\n            {/* es6 */}\r\n            <Route exact path=\"/es6\" component={es6Viewer}/>\r\n            {/* echarts */}\r\n            <Route exact path=\"/echart\" component={echartsViewer}/>\r\n            {/* testPage */}\r\n            <Route exact path=\"/testPage\" component={testPageViewer}/>\r\n        </Switch>\r\n    </Router>\r\n);\r\nexport default router;","/**************************redux***********************\r\n *1.\r\n*/\r\n//定义组件的 Reducer\r\nconst counter = {\r\n    state:0,//初始化状态\r\n    reducers: {\r\n        //定义action\r\n        increase(state, payload) {\r\n            return state + 1\r\n        },\r\n        //payload为参数\r\n        test_action(state, payload){\r\n            return state + payload\r\n        }\r\n    },\r\n    effects: {\r\n        // handle state changes with impure functions.\r\n        // use async/await for async actions\r\n        async incrementAsync(payload, rootState) {\r\n            await new Promise(resolve => setTimeout(resolve, 1000))\r\n            this.increment(payload)\r\n        },\r\n    },\r\n}//e\r\nexport {counter}","/**************************redux***********************\r\n *1.\r\n*/\r\n//定义组件的 Reducer\r\nconst user = {\r\n    state:{//初始化状态\r\n        name:\"username\",\r\n        type:\"user_state\"\r\n    },\r\n    reducers: {\r\n        //定义action\r\n        increase(state, payload) {\r\n            return state + 1\r\n        },\r\n        //payload为参数\r\n        test_action(state, payload){\r\n            return state + payload\r\n        }\r\n    },\r\n    effects: {\r\n        // handle state changes with impure functions.\r\n        // use async/await for async actions\r\n        async incrementAsync(payload, rootState) {\r\n            await new Promise(resolve => setTimeout(resolve, 1000))\r\n            this.increment(payload)\r\n        },\r\n    },\r\n}//e\r\nexport {user}","\r\nimport {counter} from './reducer_count'\r\nimport {user} from './reducer_user'\r\nimport {bookData} from './reducer_book'\r\n//数据模型\r\nconst rootModels={\r\n  counter,\r\n  user,\r\n  bookData\r\n};\r\nexport default rootModels;\r\n","/**************************redux***********************\r\n *1.\r\n*/\r\n//定义组件的 Reducer\r\nconst bookData = {\r\n    state:{\r\n        name:\"bookData\",\r\n        count:0,\r\n        redux_value:\"book初始化\",\r\n    },\r\n    reducers: {\r\n        //定义action\r\n        changeData(state,payload) {\r\n            return Object.assign({...state,...{\r\n                //redux_value:state.redux_value+(state.count+1),\r\n                redux_value:payload,\r\n                count:state.count+1 \r\n            }});\r\n        },\r\n        //payload为参数\r\n        test_action(state, payload){\r\n            return state + payload\r\n        }\r\n    },\r\n    effects: {\r\n        // handle state changes with impure functions.\r\n        // use async/await for async actions\r\n        async incrementAsync(payload, rootState) {\r\n            await new Promise(resolve => setTimeout(resolve, 1000))\r\n            this.increment(payload)\r\n        },\r\n    },\r\n}//e\r\nexport {bookData}","import { init } from '@rematch/core'\r\nimport * as models2 from './models/test';//全部导出作为一个对象\r\nimport models from './models/index';\r\n//console.log(models2);//{count:object}\r\n\r\n//console.log(\"数据models:\",models);//{count:object}\r\n//通过\"@rematch/core\"将数据model初始化为store对象\r\nconst store = init({\r\n    models \r\n});\r\nvar storeState=store.getState();//获取所有的存贮容器中的状态\r\n//console.log(\"初始化的store：\",store);\r\n//console.log(\"storeState：\",storeState);\r\nexport default store;","import React, { Component } from 'react';\r\nimport MainRouter from './router/router';\r\nimport 'antd/dist/antd.css';//全局ant样式\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\n//import store from './store/store_redux';\r\n\r\n// 根组件，挂载路由\r\nclass App extends Component {\r\n  render() {\r\n    return <Provider store={store}><MainRouter/></Provider>\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//渲染App根组件\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}