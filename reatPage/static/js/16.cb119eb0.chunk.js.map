{"version":3,"sources":["components/redux/book_history_fun.js","components/redux/book_english_fun.js","components/redux/book.js","components/redux/reduxViewer.js"],"names":["connect","state","redux_value","bookData","dispatch","props","console","log","Book","inputValue","name","evt","key","value","target","this","setState","type","onChange","handelChange","bind","onClick","changeData","Component","param","reduxViewer","className"],"mappings":"4KAyCeA,eAnBO,SAAAC,GAClB,MAAM,CACFC,YAAYD,EAAME,SAASD,gBASV,SAACE,GACtB,MAAM,KAOKJ,EArCE,SAACK,GAGd,OADAC,QAAQC,IAAI,uBAER,6BACI,0CACA,6BACKF,EAAMH,YAAY,iCCmBpBF,mBAZf,SAAyBC,GACvB,MAAO,CACLC,YAAY,WAIhB,SAA4BE,GAC1B,MAAO,KAKMJ,EA1BE,SAACK,GAGhB,OADAC,QAAQC,IAAI,uBAEV,6BACI,2CACA,6BACGF,EAAMH,iBCFXM,E,4MACFP,MAAM,CACFQ,WAAW,M,2DASHC,EAAKC,GACb,IAAIC,EAAIF,GAAQ,GACZG,EAAOF,GAAKA,EAAIG,OAAQH,EAAIG,OAAOD,MAAMF,EACzCV,EAAM,GACPW,IAAIX,EAAMW,GAAKC,GACfD,GAAIG,KAAKC,SAASf,K,+BAIhB,IAAD,OACJ,OACI,6BACI,oCACA,2BAAOgB,KAAK,OAAOJ,MAAOE,KAAKd,MAAMQ,WAAYS,SAAUH,KAAKI,aAAaC,KAAKL,KAAK,gBACvF,4BAAQM,QAAS,kBAAI,EAAKhB,MAAMiB,WAAW,EAAKrB,MAAMQ,cAAtD,yDACA,6BAAK,kBAAC,EAAD,MACL,6BAAK,kBAAC,EAAD,S,kDA3BFc,aA6CJvB,kBAAQ,MALrB,SAA4BI,GAC1B,MAAO,CACHkB,WAAW,SAACE,GAASpB,EAASD,SAASmB,WAAWE,OAG3CxB,CAAiCQ,GClD1CiB,E,kDACF,WAAYpB,GAAO,IAAD,8BACd,cAAMA,IACDJ,MAAM,CACPS,KAAK,eAHK,E,qDAOd,OACI,yBAAKgB,UAAU,QACb,kBAAC,EAAD,S,kDAVYH,aAkBXE","file":"static/js/16.cb119eb0.chunk.js","sourcesContent":["import React ,{ Component }from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\n//纯展示组件\r\nconst historyFun=(props)=>{\r\n\r\n    console.log(\"historyFun-render()\");\r\n    return(\r\n        <div>\r\n            <h2>historyFun</h2>\r\n            <div>\r\n                {props.redux_value}<p/>\r\n            </div>\r\n        </div>\r\n    )\r\n}//e\r\n\r\n/*******************reudx状态映射props*****************\r\n *1.redux状态数据映射到组件props属性中\r\n *2.该函数返回的对象数据会追加到组件的props中\r\n *3.redux state状态数据每次发生变化都会调用该函数\r\n*/\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        redux_value:state.bookData.redux_value\r\n    }\r\n}//e\r\n\r\n/*******************状态分发props*****************\r\n *1.该函数在\"状态映射\"后触发\r\n *2.该函数返回的对象数据会追加到组件的props中\r\n *3.\"容器组件\"初始化时触发，调用一次\r\n*/\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        \r\n    }\r\n}//e\r\n\r\n//console.log(\"react组件:\",historybook);\r\n//console.log(\"readux容器:\",reduxContainer);\r\nexport default connect(mapStateToProps,mapDispatchToProps)(historyFun);","import React ,{ Component }from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\n//纯展示组件\r\nconst EnglishFun=(props)=>{\r\n  \r\n  console.log(\"EnglishFun-render()\");\r\n  return(\r\n    <div>\r\n        <h2>EnglishFfun</h2>\r\n        <div>\r\n          {props.redux_value}\r\n        </div>\r\n    </div>\r\n  ) \r\n}//e\r\n\r\n//从外部获取数据\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    redux_value:\"ssss\"\r\n  }\r\n}//e\r\n//向外部传递action\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    \r\n  }\r\n}//e\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(EnglishFun);","import React ,{ Component }from 'react';\r\nimport { connect } from 'react-redux'\r\n// import History from './book_history';\r\n// import English from './book_english';\r\n\r\nimport History from './book_history_fun';\r\nimport English from './book_english_fun';\r\n\r\n//展示组件\r\nclass Book extends Component{\r\n    state={\r\n        inputValue:\"dd\"\r\n    }\r\n    /*******************处理值改变函数******************\r\n    *更新时间:2020.07.24\r\n    *参数:name(String):表单元素绑定的状态属性\r\n    ******evt(Event):\"onChange\"触发的事件对象,可能为event或表单值\r\n    *注解:\r\n    *1.html元素、react组件绑定状态属性(单向、双向绑定属性方法),\r\n    */\r\n   handelChange(name,evt){\r\n        let key=name || \"\";\r\n        let value=(evt&&evt.target)?evt.target.value:evt;//表单值\r\n        let state={};\r\n        if(key)state[key]=value;\r\n        if(key)this.setState(state);\r\n        //console.log(state);\r\n    }//e\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>book</h2>\r\n                <input type=\"text\" value={this.state.inputValue} onChange={this.handelChange.bind(this,\"inputValue\")}></input>\r\n                <button onClick={()=>this.props.changeData(this.state.inputValue)}>改变容器redux容器状态</button>\r\n                <hr/><History></History>\r\n                <hr/><English></English>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n\r\n    }\r\n}\r\n var data={\r\n    type:\"数据\"\r\n };\r\n  \r\n  //向外部传递action\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n        changeData:(param)=>{dispatch.bookData.changeData(param)}\r\n    }\r\n  }//e\r\nexport default connect(null,mapDispatchToProps)(Book);","import React ,{ Component }from 'react';\r\n\r\nimport Book from './book';\r\n//import Test_counter from './test_counter';\r\nclass reduxViewer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"reduxViewer\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n              <Book/>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        \r\n    }\r\n}\r\nexport default reduxViewer;"],"sourceRoot":""}