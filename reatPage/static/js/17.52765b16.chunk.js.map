{"version":3,"sources":["components/typeScript/tsViewer.tsx","components/typeScript/component/baseDefinition.ts","components/typeScript/component/ts_interface.ts"],"names":["tsViewer","props","baseDefinition","m1","result1","name","console","log","ts_interface","person","result","firstName","lastName","state","className","Component"],"mappings":"wKAGMA,E,kDAGF,WAAYC,GAAW,IAAD,8BAClB,cAAMA,IAHVC,eCYW,WAAyB,IAG5BC,GAH4B,SAG5BA,KAH4B,UAG5BA,IAH4B,eAG5BA,MAH4B,KAIjC,IAAIC,EAAQD,EAAGE,KACfC,QAAQC,IAAI,QAAQH,GA4BvBE,QAAQC,IAAI,SADiB,CAAC,GAAG,GAAG,KD5CrBL,GAEO,EADtBM,aEOW,WAUX,IAHiBC,EAIbC,EAHO,WADMD,EAGL,CAACE,UAAU,SAASC,SAAS,KAAKP,KAAK,iBAFrBM,UAAY,IAAMF,EAAOG,SAIvDN,QAAQC,IAAIG,GFnBCF,GAGT,EAAKK,MAAM,CACPR,KAAK,YAHS,E,qDAOlB,OACI,yBAAKS,UAAU,W,kDAXJC,aAoBRf","file":"static/js/17.52765b16.chunk.js","sourcesContent":["import React ,{ Component }from 'react';\r\nimport baseDefinition from './component/baseDefinition';\r\nimport ts_interface from './component/ts_interface';\r\nclass tsViewer extends Component{\r\n    baseDefinition=baseDefinition();//基础类型定义\r\n    ts_interface=ts_interface();//基础类型定义\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state={\r\n            name:\"tsViewer\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrap\">\r\n              {/* {this.state.name}   */}\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        \r\n    }\r\n}\r\nexport default tsViewer;","/***********************基础类型定义************************\r\n *1.typeScript基础数据类型：\r\n    1)\"number\":数值(数字)类型,包含整数和小数（比如1和3.14）\r\n    2)\"string\":字符串类型\r\n    3)\"boolean\":布尔类型\r\n    4)\"undefined\":表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值\r\n    5)\"null\":表示空值，即此处的值为空\r\n *2.typeScript引用数据类型:\r\n    1)\"Object\":对象类型,基类\r\n    2)\"Array\":数组类型\r\n    3)\"Function\":函数类型\r\n *3.typeScript特有类型\r\n    1)\"Tuple\":元组,一个已知元素数量和类型的数组,[string,number,...]\r\n    2)\"enum\":枚举,一个已知元素数量和类型的数组,[string,number,...]\r\n *4.TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式\r\n */\r\nexport default function baseDefinition(){\r\n    \r\n/********************6.定义enum枚举类型****************/\r\n       enum m1{name=\"12\",age=20};\r\n       var result1=m1.name;\r\n       console.log(\"enum:\",result1);\r\n\r\n/********************5.定义Tuple元组类型****************/\r\n        var q1:[string,number] = [\"tuple\",100];//Tuple\r\n        var q2:[number,string,boolean] = [111,\"100\",false];//Tuple\r\n\r\n/********************4.定义void类型****************/\r\n        function run():void{//void类型,函数没有返回值\r\n            console.log('run')\r\n        }\r\n        function run2():number{//函数返回值为number类型\r\n            return 123\r\n        }\r\n        function run3(type:string){//参数类型为string类型\r\n            return 123\r\n        }\r\n/********************3.定义基础数据类型****************/\r\n    var b1:boolean = false;//boolean\r\n    var b2:number = 21;//number\r\n    var b3:string = \"bob\";//string\r\n    var b100:number | undefined;//变量为undefined\r\n\r\n/********************2.定义any任意类型****************/\r\n    var num1:any = 123;//变量可以为任一值\r\n\r\n/********************1.数组类型****************/\r\n    var array_num:number[]=[1,2,3];//定义数值类型数组\r\n    var array_num2:Array<number>=[11,22,33];//定义数值类型数组(数组泛型)\r\n    console.log(\"array:\",array_num2);  \r\n\r\n\r\n}//e","/***********************interface************************\r\n *1.使用接口来描述一个包含接口要求的结构的对象,不必明确地使用 implements语句\r\n *2.一个对象如果想实现一个接口类型，则该对象中必须包含该接口的数据结构\r\n *3.TypeScript的核心原则之一是对值所具有的结构进行类型检查\r\n *4.接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约\r\n *5.interface数据结构包含两种属性类型:\r\n    1)\"必须属性\",{firstName: string}\r\n    2)\"可选属性\",{firstName?: string}\r\n    3)\"只读属性\",{readonly firstName: string}\r\n *6.带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号\r\n *7.属性名前用 readonly来指定只读属性\r\n */\r\nexport default function index(){\r\n    //定义接口数据结构\r\n    interface Person {\r\n        firstName: string,//必须属性\r\n        lastName?: string,//可选属性\r\n    }\r\n    //参数类型为Person类型\r\n    function greeter(person:Person) {\r\n        return \"Hello, \" + person.firstName + \" \" + person.lastName;\r\n    } \r\n    var person1={firstName:\"xiaoli\",lastName:\"dd\",name:\"接口\"};\r\n    var result=greeter(person1);//调用函数\r\n    console.log(result);\r\n}//e"],"sourceRoot":""}